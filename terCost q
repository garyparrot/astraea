[1mdiff --git a/app/src/test/java/org/astraea/app/web/BalancerHandlerTest.java b/app/src/test/java/org/astraea/app/web/BalancerHandlerTest.java[m
[1mindex 7659ecb0..0af20bd2 100644[m
[1m--- a/app/src/test/java/org/astraea/app/web/BalancerHandlerTest.java[m
[1m+++ b/app/src/test/java/org/astraea/app/web/BalancerHandlerTest.java[m
[36m@@ -262,7 +262,7 @@[m [mpublic class BalancerHandlerTest {[m
                       .build()));[m
 [m
       HasClusterCost clusterCostFunction =[m
[31m-          (clusterInfo, clusterBean) -> ClusterCost.of(clusterInfo == currentClusterInfo ? 1D : 0D);[m
[32m+[m[32m          (clusterInfo, clusterBean) -> () -> clusterInfo == currentClusterInfo ? 1D : 0D;[m
       HasMoveCost moveCostFunction = HasMoveCost.EMPTY;[m
 [m
       var balancerHandler = new BalancerHandler(admin);[m
[36m@@ -1252,11 +1252,10 @@[m [mpublic class BalancerHandlerTest {[m
     @Override[m
     public synchronized ClusterCost clusterCost(ClusterInfo clusterInfo, ClusterBean clusterBean) {[m
       if (original == null) original = clusterInfo;[m
[31m-      if (ClusterInfo.findNonFulfilledAllocation(original, clusterInfo).isEmpty())[m
[31m-        return ClusterCost.of(1);[m
[32m+[m[32m      if (ClusterInfo.findNonFulfilledAllocation(original, clusterInfo).isEmpty()) return () -> 1;[m
       double theCost = value0;[m
       value0 = value0 * 0.998;[m
[31m-      return ClusterCost.of(theCost);[m
[32m+[m[32m      return () -> theCost;[m
     }[m
   }[m
 [m
[36m@@ -1272,10 +1271,10 @@[m [mpublic class BalancerHandlerTest {[m
     public synchronized ClusterCost clusterCost(ClusterInfo clusterInfo, ClusterBean clusterBean) {[m
       if (original == null) original = clusterInfo;[m
       if (ClusterInfo.findNonFulfilledAllocation(original, clusterInfo).isEmpty())[m
[31m-        return ClusterCost.of(0.0001);[m
[32m+[m[32m        return () -> 0.0001;[m
       double theCost = value0;[m
       value0 = value0 * 1.00002;[m
[31m-      return ClusterCost.of(theCost);[m
[32m+[m[32m      return () -> theCost;[m
     }[m
   }[m
 [m
[1mdiff --git a/common/src/main/java/org/astraea/common/cost/RecordSizeCost.java b/common/src/main/java/org/astraea/common/cost/RecordSizeCost.java[m
[1mindex 2a65f1ee..7532ca45 100644[m
[1m--- a/common/src/main/java/org/astraea/common/cost/RecordSizeCost.java[m
[1m+++ b/common/src/main/java/org/astraea/common/cost/RecordSizeCost.java[m
[36m@@ -69,7 +69,7 @@[m [mpublic class RecordSizeCost[m
   @Override[m
   public ClusterCost clusterCost(ClusterInfo clusterInfo, ClusterBean clusterBean) {[m
     var result = clusterInfo.replicaStream().mapToLong(Replica::size).sum();[m
[31m-    return ClusterCost.of(result);[m
[32m+[m[32m    return () -> result;[m
   }[m
 [m
   @Override[m
[1mdiff --git a/common/src/test/java/org/astraea/common/balancer/BalancerTest.java b/common/src/test/java/org/astraea/common/balancer/BalancerTest.java[m
[1mindex b172b3cd..09b69f59 100644[m
[1m--- a/common/src/test/java/org/astraea/common/balancer/BalancerTest.java[m
[1m+++ b/common/src/test/java/org/astraea/common/balancer/BalancerTest.java[m
[36m@@ -164,7 +164,7 @@[m [mclass BalancerTest {[m
           new HasClusterCost() {[m
             @Override[m
             public ClusterCost clusterCost(ClusterInfo clusterInfo, ClusterBean clusterBean) {[m
[31m-              return ClusterCost.of(ThreadLocalRandom.current().nextDouble());[m
[32m+[m[32m              return () -> ThreadLocalRandom.current().nextDouble();[m
             }[m
           };[m
 [m
[36m@@ -239,7 +239,7 @@[m [mclass BalancerTest {[m
                   Balancer.create([m
                           theClass,[m
                           AlgorithmConfig.builder()[m
[31m-                              .clusterCost((clusterInfo, bean) -> ClusterCost.of(Math.random()))[m
[32m+[m[32m                              .clusterCost((clusterInfo, bean) -> () -> Math.random())[m
                               .build())[m
                       .offer([m
                           admin[m
[36m@@ -288,7 +288,7 @@[m [mclass BalancerTest {[m
                           .createdTimestamp(),[m
                       "The metric counter increased");[m
                   called.set(true);[m
[31m-                  return ClusterCost.of(0);[m
[32m+[m[32m                  return () -> 0;[m
                 }[m
               };[m
           Balancer.create([m
[36m@@ -329,9 +329,7 @@[m [mclass BalancerTest {[m
               throw new NoSufficientMetricsException([m
                   costFunction,[m
                   Duration.ofMillis(sampleTimeMs - (System.currentTimeMillis() - startMs)));[m
[31m-            return new Plan([m
[31m-                ClusterCost.of(0),[m
[31m-                new Solution(ClusterCost.of(0), MoveCost.EMPTY, currentClusterInfo));[m
[32m+[m[32m            return new Plan(() -> 0, new Solution(() -> 0, MoveCost.EMPTY, currentClusterInfo));[m
           }[m
         };[m
 [m
[1mdiff --git a/common/src/test/java/org/astraea/common/balancer/algorithms/AlgorithmConfigTest.java b/common/src/test/java/org/astraea/common/balancer/algorithms/AlgorithmConfigTest.java[m
[1mindex 705fb00f..db97f435 100644[m
[1m--- a/common/src/test/java/org/astraea/common/balancer/algorithms/AlgorithmConfigTest.java[m
[1m+++ b/common/src/test/java/org/astraea/common/balancer/algorithms/AlgorithmConfigTest.java[m
[36m@@ -18,7 +18,6 @@[m [mpackage org.astraea.common.balancer.algorithms;[m
 [m
 import java.util.Map;[m
 import org.astraea.common.Configuration;[m
[31m-import org.astraea.common.cost.ClusterCost;[m
 import org.junit.jupiter.api.Assertions;[m
 import org.junit.jupiter.api.Test;[m
 [m
[36m@@ -28,7 +27,7 @@[m [mpublic class AlgorithmConfigTest {[m
   void testCopy() {[m
     var config0 =[m
         AlgorithmConfig.builder()[m
[31m-            .clusterCost((i, j) -> ClusterCost.of(1))[m
[32m+[m[32m            .clusterCost((i, j) -> () -> 1)[m
             .config(Configuration.of(Map.of()))[m
             .build();[m
     var config1 = AlgorithmConfig.builder(config0).build();[m
[1mdiff --git a/common/src/test/java/org/astraea/common/cost/DecreasingCost.java b/common/src/test/java/org/astraea/common/cost/DecreasingCost.java[m
[1mindex 93b00f0f..57a2c751 100644[m
[1m--- a/common/src/test/java/org/astraea/common/cost/DecreasingCost.java[m
[1m+++ b/common/src/test/java/org/astraea/common/cost/DecreasingCost.java[m
[36m@@ -31,10 +31,9 @@[m [mpublic class DecreasingCost implements HasClusterCost {[m
   @Override[m
   public synchronized ClusterCost clusterCost(ClusterInfo clusterInfo, ClusterBean clusterBean) {[m
     if (original == null) original = clusterInfo;[m
[31m-    if (ClusterInfo.findNonFulfilledAllocation(original, clusterInfo).isEmpty())[m
[31m-      return ClusterCost.of(1);[m
[32m+[m[32m    if (ClusterInfo.findNonFulfilledAllocation(original, clusterInfo).isEmpty()) return () -> 1;[m
     double theCost = value0;[m
     value0 = value0 * 0.998;[m
[31m-    return ClusterCost.of(theCost);[m
[32m+[m[32m    return () -> theCost;[m
   }[m
 }[m
