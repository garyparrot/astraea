package org.astraea.balancer.generator;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ThreadLocalRandom;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import org.astraea.cost.ClusterInfo;
import org.astraea.topic.TopicAdmin;

public class MonkeyPlanGenerator implements RebalancePlanGenerator {

  private final TopicAdmin topicAdmin;

  public MonkeyPlanGenerator(TopicAdmin topicAdmin) {
    this.topicAdmin = topicAdmin;
  }

  @Override
  public RebalancePlanProposal generate(ClusterInfo currentCluster) {

    // get current topic/partition/replica state
    final var listOfBrokers = List.copyOf(topicAdmin.brokerIds());
    final var replicas = topicAdmin.replicas(currentCluster.topics());

    // monkey pick a broker for you
    final var monkeyPickingBroker =
        (Supplier<Integer>)
            () -> listOfBrokers.get(ThreadLocalRandom.current().nextInt(0, listOfBrokers.size()));

    // proposal new plan
    final var afterRebalance =
        replicas.entrySet().stream()
            .collect(Collectors.groupingBy(x -> x.getKey().topic()))
            .entrySet()
            .stream()
            .map(
                x ->
                    Map.entry(
                        x.getKey(),
                        x.getValue().stream()
                            .collect(
                                Collectors.toUnmodifiableMap(
                                    y -> y.getKey().partition(),
                                    y ->
                                        y.getValue().stream()
                                            .map(replica -> monkeyPickingBroker.get())
                                            .collect(Collectors.toUnmodifiableList())))))
            .collect(Collectors.toUnmodifiableMap(Map.Entry::getKey, Map.Entry::getValue));

    // aggregate new result
    ClusterLogAllocation rebalancePlan = new ClusterLogAllocation(afterRebalance);
    return RebalancePlanProposal.builder()
        .withRebalancePlan(rebalancePlan)
        .addWarning(List.of("This plan is generated by a monkey, use it at your own risk."))
        .build();
  }
}
